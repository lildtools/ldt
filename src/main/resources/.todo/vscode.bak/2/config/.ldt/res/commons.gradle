/* ***************************************************************************
 * @import "java"
 * @import "org.asciidoctor.jvm.convert:3.3.2"
 * @import "checkstyle"
 * @import "org.sonarqube:4.4.1.3373"
 */

ext {
    repositoryServerHost = System.getenv("CI_SERVER_HOST")
    repositoryProjectPath = System.getenv("CI_PROJECT_PATH")

    resourcesDir = "lib/esnc-commons/dist/res"

    checkstyleVersion = "10.16.0"
}

def printProjectName = tasks.register("printProjectName") {
  doLast {
    println project.name
  }
}

def printProjectVersion = tasks.register("printProjectVersion") {
  doLast {
    println project.version
  }
}

def generateProjectMeta = tasks.register("generateProjectMeta") {
  doLast {
    new File("$buildDir/resources/main/project.properties").withWriter { w ->
      Properties p = new Properties()
      p["project.name"] = project.name.toString()
      p["project.version"] = project.version.toString()
      p.store w, null
    }
  }
}

generateProjectMeta.configure {
    dependsOn processResources
}

def cleanDist = tasks.register("cleanDist", Delete) {
  delete "$projectDir/dist/"
}

def makeDist = tasks.register("makeDist", Copy) {
  dependsOn _makeDistFolder, _makeDistPlainVersion, _makeDistPlainLatest, _makeDistVersion, _makeDistLatest
}

def _makeDistFolder = tasks.register("_makeDistFolder", Task) {
  doLast {
    mkdir "$projectDir/dist/"
  }
}

def _makeDistPlainVersion = tasks.register("_makeDistPlainVersion", Copy) {
  from "$buildDir/libs/${project.name}-${project.version}-plain.jar"
  into "$projectDir/dist/"
  rename "${project.name}-${project.version}-plain.jar", "${project.name}-${project.version}.jar"
}

def _makeDistPlainLatest = tasks.register("_makeDistPlainLatest", Copy) {
  from "$buildDir/libs/${project.name}-${project.version}-plain.jar"
  into "$projectDir/dist/"
  rename "${project.name}-${project.version}-plain.jar", "${project.name}-latest.jar"
}

def _makeDistVersion = tasks.register("_makeDistVersion", Copy) {
  from "$buildDir/libs/${project.name}-${project.version}.jar"
  into "$projectDir/dist/"
}

def _makeDistLatest = tasks.register("_makeDistLatest", Copy) {
  from "$buildDir/libs/${project.name}-${project.version}.jar"
  into "$projectDir/dist/"
  rename "${project.name}-${project.version}.jar", "${project.name}-latest.jar"
}

javadoc {
  destinationDir = file("$projectDir/dist/docs/")
}

asciidoctor {
  inputs.dir file("$buildDir/generated-snippets/")
}

checkstyle {
  configDirectory = file("$projectDir/$resourcesDir/checkstyle/")
  configFile      = file("$projectDir/$resourcesDir/checkstyle/checkstyle.xml")
  toolVersion     = "$checkstyleVersion"
}

tasks.withType(Checkstyle) {
  reports {
    sarif.required       = false
    sarif.outputLocation = file("$buildDir/generated/checkstyle/index.sarif")
    xml.required         = false
    xml.outputLocation   = file("$buildDir/generated/checkstyle/index.xml")
    html.required        = true
    html.outputLocation  = file("$buildDir/generated/checkstyle/index.html")
  }
}

def changelog = tasks.register("changelog") {
  doLast { }
}

def changelogTemplate = ""
  .concat("# Changelog\n")
  .concat("\n")
  .concat("All notable changes to this project will be documented in this file. See [conventional-commits](https://www.conventionalcommits.org/en/v1.0.0/) for commit guidelines.\n")
  .concat("{{#tags}}\n")
  .concat("\n")
  .concat("## [{{name}}](https://${repositoryServerHost}/${repositoryProjectPath}/-/tags/{{name}}) ({{tagDate .}})\n")
  .concat("{{#commits}}\n")
  .concat("\n")
  .concat("- {{{message}}} ([{{hash}}](https://${repositoryServerHost}/${repositoryProjectPath}/-/commit/{{hashFull}}))\n")
  .concat("{{/commits}}\n")
  .concat("{{/tags}}\n");

def changelogIgnoredCommits = ""
  .concat(".*(")
  .concat("(CHANGELOG:)|(changelog:)|")
  .concat("(CHORE:)|(chore:)|")
  .concat("(DEBUG:)|(debug:)|")
  .concat("(FIC:)|(fic:)|")
  .concat("(IMPR:)|(impr:)|")
  .concat("(Merge )|")
  .concat("(REFACT:)|(refact:)|")
  .concat("(REL:)|(rel:)|")
  .concat("(REVERT:)|(revert:)|")
  .concat("(WIP -)|(wip -)|(WIP:)|(wip:)|(- )")
  .concat(").*");


gitChangelog {
  fromRepo                      = file("$projectDir/.");
  file                          = file("$projectDir/dist/CHANGELOG.md");
  templateContent               = "$changelogTemplate";
  ignoreCommitsIfMessageMatches = "$changelogIgnoredCommits";
}

changelog.configure {
  dependsOn gitChangelog
}

test {
  useJUnitPlatform()
  outputs.dir file("$buildDir/generated-snippets/")

  reports.html.required     = true
  reports.junitXml.required = false

  maxHeapSize = "4096m"
  forkEvery 4

  testLogging {
    events "passed"
  }
}

sonar {
  properties {
    property "sonar.projectKey", "${project.name}"
    property "sonar.qualitygate.wait", true
    property "sonar.sourceEncoding", "UTF-8"
  }
}
