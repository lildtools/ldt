#!/bin/bash

#################################################################################
## Code Server docker-wrapper script collection                                ##
##                                                                             ##
##                                                                             ##
##   CODENAME:   ldt-vscode                                                    ##
##                                                                             ##
##   @author:    LDworks                                                       ##
##   @version:   1.0.0.202405171757                                            ##
##                                                                             ##
#################################################################################

main() {
    parse $*
    load "${args[@]}"
    validate
    run
    if [ $? -ne 0 ]; then exit 1; fi
    exit 0
}

#################################################################################
## Parse input arguments

parse() {
    args=()

    for arg in "$@"; do
        case "$arg" in
        --debug)
            DEBUG=true
            ;;
        --dockerImageTag | -i)
            DOCKER_IMAGE_FLAG=true
            ;;
        --dockerPort | -p)
            DOCKER_PORT_FLAG=true
            ;;
        --dockerPortExpose | -x)
            DOCKER_PORT_EXPOSE_FLAG=true
            ;;
        --dockerName | -n)
            DOCKER_NAME_FLAG=true
            ;;
        --dockerDaemon | -d)
            DOCKER_DAEMON=true
            ;;
        --dockerMount | -m)
            DOCKER_MOUNT_FLAG=true
            ;;
        --dockerTargetProfile | -t)
            DOCKER_PROFILE_FLAG=true
            ;;
        --dockerCommand | -c)
            DOCKER_COMMAND_FLAG=true
            ;;
        *)
            if [ "$DOCKER_IMAGE_FLAG" = "true" ]; then
                DOCKER_IMAGE_FLAG=false
                DOCKER_IMAGE=$arg
                continue
            fi
            if [ "$DOCKER_PORT_FLAG" = "true" ]; then
                DOCKER_PORT_FLAG=false
                DOCKER_PORT=$arg
                continue
            fi
            if [ "$DOCKER_PORT_EXPOSE_FLAG" = "true" ]; then
                DOCKER_PORT_EXPOSE_FLAG=false
                DOCKER_PORT_EXPOSE=$arg
                continue
            fi
            if [ "$DOCKER_NAME_FLAG" = "true" ]; then
                DOCKER_NAME_FLAG=false
                DOCKER_NAME=$arg
                continue
            fi
            if [ "$DOCKER_MOUNT_FLAG" = "true" ]; then
                DOCKER_MOUNT_FLAG=false
                DOCKER_MOUNT=$arg
                continue
            fi
            if [ "$DOCKER_PROFILE_FLAG" = "true" ]; then
                DOCKER_PROFILE_FLAG=false
                DOCKER_PROFILE=$arg
                continue
            fi
            if [ "$DOCKER_COMMAND_FLAG" = "true" ]; then
                DOCKER_COMMAND_FLAG=false
                DOCKER_COMMAND=$arg
                continue
            fi
            args+=($arg)
            ;;
        esac
    done
}

#################################################################################
## Prints a formatted message to stdout

log() {
    logLevel=$1
    logMessage=$2

    now=$(date +"%Y-%m-%d %H:%M:%S.%3N")

    if [ $logLevel = "DEBUG" ]; then
        if [ "$DEBUG" = "true" ]; then
            printf "$now [$logLevel] %s\n" "$logMessage"
        fi
    else
        printf "$now [$logLevel] %s\n" "$logMessage"
    fi
}

#################################################################################
## Load script context and environment

load() {
    log "DEBUG" "loading..."

    ctx=docker
    dockerContainerName="$DOCKER_NAME"
    dockerContainerMount="$DOCKER_MOUNT"
    dockerContainerNetwork=""
    dockerContainerUser=""
    dockerContainerEnv=""
    dockerContainerVolumes=""
    dockerContainerWorkdir=""
    dockerContainerAppPath="/usr/src/app"
    dockerContainerPublish=""
    dockerContainerPort="$DOCKER_PORT"
    dockerContainerPortExpose="$DOCKER_PORT_EXPOSE"
    dockerContainerImage="$DOCKER_IMAGE"
    dockerContainerCommand="$DOCKER_COMMAND"
    dockerContainerCommandProfile="$DOCKER_PROFILE"
    me=$(whoami)
    sandbox=$1
    shift
    task=$*
    workindDir=$PWD

    if [ "$MYSQL_DB" = "" ]; then MYSQL_DB=mysqldb_local; fi
    if [ "$MYSQL_USER" = "" ]; then MYSQL_USER=mysql; fi
    if [ "$MYSQL_PASS" = "" ]; then MYSQL_PASS=my5qLLw; fi
    if [ "$MYSQL_NET" = "" ]; then MYSQL_NET=mysql-net; fi
    if [ "$PGADMIN_USER" = "" ]; then PGADMIN_USER=root@pgadmin.org; fi
    if [ "$PGADMIN_PASS" = "" ]; then PGADMIN_PASS=pg4dM1nLw; fi
    if [ "$PHPMYADMIN_HOST" = "" ]; then PHPMYADMIN_HOST=mysql; fi
    if [ "$POSTGRES_DB" = "" ]; then POSTGRES_DB=psqldb_local; fi
    if [ "$POSTGRES_USER" = "" ]; then POSTGRES_USER=postgres; fi
    if [ "$POSTGRES_PASS" = "" ]; then POSTGRES_PASS=p0stgresLw; fi
    if [ "$POSTGRES_NET" = "" ]; then POSTGRES_NET=postgres-net; fi
    if [ "$RABBITMQ_HOST" = "" ]; then RABBITMQ_HOST=rabbitmq; fi
    if [ "$RABBITMQ_USER" = "" ]; then RABBITMQ_USER=rabbitmq; fi
    if [ "$RABBITMQ_PASS" = "" ]; then RABBITMQ_PASS=r4bbitLmq; fi

    if [ -f $workindDir/.env ]; then
        export $(cat $workindDir/.env | xargs)
    fi
    log "DEBUG" "-- ctx=$ctx"

    log "DEBUG" "-- dockerContainerName=$dockerContainerName"
    log "DEBUG" "-- dockerContainerMount=$dockerContainerMount"
    log "DEBUG" "-- dockerContainerNetwork=$dockerContainerNetwork"
    log "DEBUG" "-- dockerContainerUser=$dockerContainerUser"
    log "DEBUG" "-- dockerContainerEnv=$dockerContainerEnv"
    log "DEBUG" "-- dockerContainerVolumes=$dockerContainerVolumes"
    log "DEBUG" "-- dockerContainerWorkdir=$dockerContainerWorkdir"
    log "DEBUG" "-- dockerContainerAppPath=$dockerContainerAppPath"
    log "DEBUG" "-- dockerContainerPublish=$dockerContainerPublish"
    log "DEBUG" "-- dockerContainerPort:"
    log "DEBUG" "-- --- dockerContainerPortPublish=$dockerContainerPort"
    log "DEBUG" "-- --- dockerContainerPortExpose=$dockerContainerPortExpose"
    log "DEBUG" "-- dockerContainerImage=$dockerContainerImage"
    log "DEBUG" "-- dockerContainerCommand=$dockerContainerCommand"
    log "DEBUG" "-- dockerContainerCommandProfile=$dockerContainerCommandProfile"

    log "DEBUG" "-- me=$me"
    log "DEBUG" "-- sandbox=$sandbox"
    log "DEBUG" "-- task=$task"
    log "DEBUG" "-- workindDir=$workindDir"

    log "DEBUG" "-- environment:"
    log "DEBUG" "-- --- MYSQL_DB=$MYSQL_DB"
    log "DEBUG" "-- --- MYSQL_USER=$MYSQL_USER"
    log "DEBUG" "-- --- MYSQL_PASS=$MYSQL_PASS"
    log "DEBUG" "-- --- MYSQL_NET=$MYSQL_NET"
    log "DEBUG" "-- --- PGADMIN_USER=$PGADMIN_USER"
    log "DEBUG" "-- --- PGADMIN_PASS=$PGADMIN_PASS"
    log "DEBUG" "-- --- PHPMYADMIN_HOST=$PHPMYADMIN_HOST"
    log "DEBUG" "-- --- POSTGRES_DB=$POSTGRES_DB"
    log "DEBUG" "-- --- POSTGRES_USER=$POSTGRES_USER"
    log "DEBUG" "-- --- POSTGRES_PASS=$POSTGRES_PASS"
    log "DEBUG" "-- --- POSTGRES_NET=$POSTGRES_NET"
    log "DEBUG" "-- --- RABBITMQ_HOST=$RABBITMQ_HOST"
    log "DEBUG" "-- --- RABBITMQ_USER=$RABBITMQ_USER"
    log "DEBUG" "-- --- RABBITMQ_PASS=$RABBITMQ_PASS"
}

#################################################################################
## Validate loaded context and environment

validate() {
    log "DEBUG" "validating..."

    if [ "$ctx" = "" ]; then
        log "ERROR" "context is required!"
        exit 400
    fi
    if [ ! "$ctx" = "docker" ]; then
        log "ERROR" "context is invalid!"
        exit 400
    fi
    if [ "$sandbox" = "" ]; then
        log "ERROR" "sandbox is required!"
        exit 400
    fi
    if [ ! "$sandbox" = "run" ] &&
        [ ! "$sandbox" = "gnu-make" ] &&
        [ ! "$sandbox" = "gradle" ] &&
        [ ! "$sandbox" = "mysql" ] &&
        [ ! "$sandbox" = "ng" ] &&
        [ ! "$sandbox" = "node" ] &&
        [ ! "$sandbox" = "pgadmin" ] &&
        [ ! "$sandbox" = "php" ] &&
        [ ! "$sandbox" = "php-fpm" ] &&
        [ ! "$sandbox" = "phpmyadmin" ] &&
        [ ! "$sandbox" = "postgres" ] &&
        [ ! "$sandbox" = "rabbitmq" ] &&
        [ ! "$sandbox" = "webpack" ]; then
        log "ERROR" "sandbox is invalid!"
        exit 400
    fi
    if [ "$workindDir" = "" ]; then
        log "ERROR" "working directory is required!"
        exit 400
    fi
    if [ ! -d "$workindDir" ]; then
        log "ERROR" "working directory is invalid!"
        exit 400
    fi
}

#################################################################################
## Run task in docker context with sandbox environment

run() {
    log "DEBUG" "preparing..."

    if [ "$ctx" = "docker" ]; then
        if [ "$sandbox" = "run" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=debian:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=docker-sandbox
            fi
            log "DEBUG" "configure... 'docker' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u $(id -u $me):$(id -g $me)"
            dockerContainerVolumes="-v $workindDir:$dockerContainerAppPath"
            dockerContainerWorkdir="-w $dockerContainerAppPath"
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPort"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "gnu-make" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=ubuntu:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=gnu-make
            fi
            log "DEBUG" "configure... 'gnu-make' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u $(id -u $me):$(id -g $me)"
            dockerContainerVolumes="-v $workindDir:$dockerContainerAppPath"
            dockerContainerWorkdir="-w $dockerContainerAppPath"
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPort"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            if [ "$task" = "run" ]; then
                dockerContainerCommand="apt-get install -y inotify-tools"
                dockerContainerCommand="$dockerContainerCommand && make watch --codeChanges --with inotify-tools"
                doDockerRun "sh -c \"$dockerContainerCommand\""
                return $dockerStatus
            fi
            if [ "$task" = "exec" ]; then
                doDockerExec "sh"
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "gradle" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=gradle:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=gradle
            fi
            log "DEBUG" "configure... 'gradle' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u $(id -u $me):$(id -g $me)"
            dockerContainerVolumes="-v $workindDir:$dockerContainerAppPath"
            dockerContainerWorkdir="-w $dockerContainerAppPath"
            if [ ! "$dockerContainerMount" = "" ]; then
                dockerContainerVolumes="$dockerContainerVolumes -v $dockerContainerMount"
            fi
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPort"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            if [ "$task" = "start" ]; then
                doDockerRun "sh -c \"gradle bootRun\""
                return $dockerStatus
            fi
            if [ "$task" = "exec" ]; then
                doDockerExec "sh"
                return $dockerStatus
            fi
            doDockerRun "sh -c \"gradle $task\""
            return $dockerStatus
        fi
        if [ "$sandbox" = "mysql" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=mysql:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=mysql
            fi
            log "DEBUG" "configure... 'mysql' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerNetwork="--network $MYSQL_NET"
            dockerContainerEnv="$dockerContainerEnv -e MYSQL_ROOT_PASSWORD=$MYSQL_PASS"
            dockerContainerEnv="$dockerContainerEnv -e MYSQL_DATABASE=$MYSQL_DB"
            dockerContainerVolumes="-v /srv/$(echo $dockerContainerImage | tr : -):/var/lib/mysql"
            dockerContainerPublish="-p 3306:3306 -p 33060:33060"

            doDockerNetworkCheck $MYSQL_NET

            if [ "$task" = "start" ]; then
                doDockerRun "mysqld --default-authentication-plugin=mysql_native_password"
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "ng" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=node:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=angular
            fi
            if [ "$dockerContainerCommandProfile" = "" ]; then
                dockerContainerCommandProfile=local
            fi
            if [ "$dockerContainerPort" = "" ]; then
                dockerContainerPort=4200
            fi
            log "DEBUG" "configure... 'angular' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u $(id -u $me):$(id -g $me)"
            dockerContainerVolumes="-v $workindDir:$dockerContainerAppPath"
            dockerContainerWorkdir="-w $dockerContainerAppPath"
            if [ ! "$dockerContainerMount" = "" ]; then
                dockerContainerVolumes="$dockerContainerVolumes -v $dockerContainerMount"
            fi
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPort"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            if [ "$task" = "start" ]; then
                doDockerRun "sh -c \"npm run start-$dockerContainerCommandProfile\""
                return $dockerStatus
            fi
            if [ "$task" = "exec" ]; then
                doDockerExec "sh"
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "node" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=node:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=nodejs
            fi
            if [ "$dockerContainerCommandProfile" = "" ]; then
                dockerContainerCommandProfile=local
            fi
            log "DEBUG" "configure... 'nodejs' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u $(id -u $me):$(id -g $me)"
            dockerContainerVolumes="-v $workindDir:$dockerContainerAppPath"
            dockerContainerWorkdir="-w $dockerContainerAppPath"
            if [ ! "$dockerContainerMount" = "" ]; then
                dockerContainerVolumes="$dockerContainerVolumes -v $dockerContainerMount"
            fi
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPort"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            if [ "$task" = "start" ]; then
                doDockerRun "sh -c \"npm run start-$dockerContainerCommandProfile\""
                return $dockerStatus
            fi
            if [ "$task" = "exec" ]; then
                doDockerExec "sh"
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "pgadmin" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=dpage/pgadmin4:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=pgadmin
            fi
            log "DEBUG" "configure... 'pgadmin' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u root"
            dockerContainerNetwork="--network $POSTGRES_NET"
            dockerContainerEnv="$dockerContainerEnv -e PGADMIN_DEFAULT_EMAIL=$PGADMIN_USER"
            dockerContainerEnv="$dockerContainerEnv -e PGADMIN_DEFAULT_PASSWORD=$PGADMIN_PASS"
            dockerContainerEnv="$dockerContainerEnv -e POSTGRES_DB=$POSTGRES_DB"
            dockerContainerVolumes="-v /srv/$(echo $dockerContainerImage | tr : -):/var/lib/postgresql/data"
            dockerContainerPublish="-p 5050:80"

            doDockerNetworkCheck $POSTGRES_NET

            if [ "$task" = "start" ]; then
                doDockerRun
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "php" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=php:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=php
            fi
            log "DEBUG" "configure... 'php' sandbox"
            dockerContainerName="--name $dockerContainerName"
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPort"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            if [ "$task" = "run" ]; then
                doDockerRun "sh"
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "php-fpm" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=php-fpm:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=php-fpm
            fi
            log "DEBUG" "configure... 'php-fpm' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u root"
            dockerContainerVolumes="$dockerContainerVolumes -v $workindDir/dist/www:$dockerContainerAppPath"
            dockerContainerVolumes="$dockerContainerVolumes -v $workindDir/dist/conf/nginx.conf:/etc/nginx/nginx.conf"
            dockerContainerWorkdir="-w $dockerContainerAppPath"
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:80"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            if [ "$task" = "start" ]; then
                doDockerRun "sh -c \"chmod -R 755 $dockerContainerAppPath && service php8.2-fpm start && service nginx start && tail -f /var/log/nginx/access.log\""
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "phpmyadmin" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=phpmyadmin:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=phpmyadmin
            fi
            if [ "$dockerContainerPort" = "" ]; then
                dockerContainerPort=
            fi
            log "DEBUG" "configure... 'phpmyadmin' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerNetwork="--network $MYSQL_NET"
            dockerContainerEnv="$dockerContainerEnv -e MYSQL_ROOT_PASSWORD=$MYSQL_PASS"
            dockerContainerEnv="$dockerContainerEnv -e PMA_HOST=$PHPMYADMIN_HOST"
            dockerContainerEnv="$dockerContainerEnv -e UPLOAD_LIMIT=10G"
            dockerContainerVolumes="-v /srv/$(echo $dockerContainerImage | tr : -):/var/lib/phpmyadmin"
            dockerContainerPublish="-p 8080:80"

            doDockerNetworkCheck $MYSQL_NET

            if [ "$task" = "start" ]; then
                doDockerRun
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "postgres" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=postgres:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=postgres
            fi
            log "DEBUG" "configure... 'postgres' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerNetwork="--network $POSTGRES_NET"
            dockerContainerEnv="$dockerContainerEnv -e POSTGRES_USER=$POSTGRES_USER"
            dockerContainerEnv="$dockerContainerEnv -e POSTGRES_PASSWORD=$POSTGRES_PASS"
            dockerContainerEnv="$dockerContainerEnv -e POSTGRES_DB=$POSTGRES_DB"
            dockerContainerVolumes="-v /srv/$(echo $dockerContainerImage | tr : -):/var/lib/postgresql/data"
            dockerContainerPublish="-p 5432:5432"

            doDockerNetworkCheck $POSTGRES_NET

            if [ "$task" = "start" ]; then
                doDockerRun
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "rabbitmq" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=rabbitmq:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=rabbitmq
            fi
            log "DEBUG" "configure... 'rabbitmq' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerEnv="$dockerContainerEnv -e RABBITMQ_DEFAULT_VHOST=$RABBITMQ_HOST"
            dockerContainerEnv="$dockerContainerEnv -e RABBITMQ_DEFAULT_USER=$RABBITMQ_USER"
            dockerContainerEnv="$dockerContainerEnv -e RABBITMQ_DEFAULT_PASS=$RABBITMQ_PASS"
            dockerContainerVolumes="-v /srv/$(echo $dockerContainerImage | tr : -):/var/lib/rabbitmq"
            dockerContainerPublish="-p 5672:5672 -p 15672:15672"

            if [ "$task" = "start" ]; then
                doDockerRun
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
        if [ "$sandbox" = "webpack" ]; then
            if [ "$dockerContainerImage" = "" ]; then
                dockerContainerImage=node:latest
            fi
            if [ "$dockerContainerName" = "" ]; then
                dockerContainerName=webpack
            fi
            if [ "$dockerContainerCommandProfile" = "" ]; then
                dockerContainerCommandProfile=local
            fi
            if [ "$dockerContainerPort" = "" ]; then
                dockerContainerPort=4200
            fi
            log "DEBUG" "configure... 'webpack' sandbox"
            dockerContainerName="--name $dockerContainerName"
            dockerContainerUser="-u $(id -u $me):$(id -g $me)"
            dockerContainerVolumes="-v $workindDir:$dockerContainerAppPath"
            dockerContainerWorkdir="-w $dockerContainerAppPath"
            if [ ! "$dockerContainerMount" = "" ]; then
                dockerContainerVolumes="$dockerContainerVolumes -v $dockerContainerMount"
            fi
            if [ ! "$dockerContainerPort" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPort"
            fi
            if [ ! "$dockerContainerPortExpose" = "" ]; then
                dockerContainerPublish="-p $dockerContainerPort:$dockerContainerPortExpose"
            fi

            if [ "$task" = "start" ]; then
                doDockerRun "sh -c \"npm run start-$dockerContainerCommandProfile\""
                return $dockerStatus
            fi
            if [ "$task" = "exec" ]; then
                doDockerExec "sh"
                return $dockerStatus
            fi
            doDockerRun "$task"
            return $dockerStatus
        fi
    fi
}

#################################################################################
## Do docker exec command with processed arguments

doDockerExec() {
    log "DEBUG" "executing..."
    if [ "$dockerContainerCommand" = "" ]; then dockerContainerCommand=$1; fi
    cmd="docker exec"
    cmd="$cmd -it"
    cmd="$cmd $dockerContainerName"
    cmd="$cmd $dockerContainerUser"
    cmd="$cmd $dockerContainerCommand"
    log "DEBUG" "-- cmd='$cmd'"
    eval "$cmd"
    dockerStatus=102
}

#################################################################################
## Do docker run command with processed arguments

doDockerRun() {
    log "DEBUG" "running..."
    if [ "$dockerContainerCommand" = "" ]; then dockerContainerCommand=$1; fi
    cmd="docker run"
    cmd="$cmd -it"
    if [ "$DOCKER_DAEMON" = "true" ]; then cmd="$cmd -d"; fi
    cmd="$cmd --rm"
    cmd="$cmd $dockerContainerName"
    cmd="$cmd $dockerContainerNetwork"
    cmd="$cmd $dockerContainerUser"
    cmd="$cmd $dockerContainerEnv"
    cmd="$cmd $dockerContainerVolumes"
    cmd="$cmd $dockerContainerWorkdir"
    cmd="$cmd $dockerContainerPublish"
    cmd="$cmd $dockerContainerImage"
    cmd="$cmd $dockerContainerCommand"
    log "DEBUG" "-- cmd='$cmd'"
    eval "$cmd"
    dockerStatus=102
}

#################################################################################
## Do docker network check by given name

doDockerNetworkCheck() {
    networkName=$1
    networkExists=$(docker network ls | grep $networkName)

    if [ "$networkExists" = "" ]; then
        log "DEBUG" "-- create docker network... '$networkName'"
        docker network create $networkName
    fi
}

#################################################################################
## Do docker volume check by given name

doDockerVolumeCheck() {
    volumeName=$1
    volumeExists=$(docker volume ls | grep $volumeName)

    if [ "$volumeExists" = "" ]; then
        log "DEBUG" "-- create docker volume... '$volumeName'"
        docker volume create $volumeName
    fi
}

#################################################################################
## USAGE:
##      dockerw <context> [sandbox] [task] <args>
##
## context(s):
##      docker                                          -    running in docker context ...
##
## sandbox(s):
##      run                                             -    ... with a debian sandbox environment
##      gnu-make                                        -    ... with a GNU Make sandbox environment
##      gradle                                          -    ... with a Gradle sandbox environment
##      mysql                                           -    ... with a MySQL Database Server sandbox environment
##      ng                                              -    ... with an Angular sandbox environment
##      node                                            -    ... with a NodeJS sandbox environment
##      pgadmin                                         -    ... with a pgAdmin4 sandbox environment
##      php                                             -    ... with a PHP sandbox environment
##      php-fpm                                         -    ... with a PHP-fpm sandbox environment
##      phpmyadmin                                      -    ... with a phpMyAdmin sandbox environment
##      postgres                                        -    ... with a PostgreSQL Database Server sandbox environment
##      rabbitmq                                        -    ... with a RabbitMQ Messaging sandbox environment
##      webpack                                         -    ... with a WebPack sandbox environment
##
## task(s):
##      run                                             -    run the given sh command
##      start                                           -    run start command for a dynamic project type (gradle, npm, etc...) in the preconfigured docker container
##      exec                                            -    run exec command for a shell terminal in the preconfigured docker container
##      custom                                          -    run any custom unix command in the preconfigured docker container
##
## arg(s):
##      --dockerImageTag | -i                           -    docker image tag (imageName:version)
##      --dockerPort | -p                               -    docker port publish to localhost (0000)
##      --dockerPortExpose | -x                         -    docker port expose to localhost (0000)
##      --dockerDaemon | -d                             -    docker daemon flag (true|false)
##      --dockerName | -n                               -    docker container name (any-custom-name)
##      --dockerTargetProfile | -t                      -    docker target profile for task (anyCustomProfile)
##      --dockerCommand | -c                            -    docker command to run in the preconfigured docker container with preconfigured sandbox
##      --debug                                         -    enable or disable debug mode of the wrapper (true|false)
##
## environment:
##      DEBUG                                           -    true|false
##      MYSQL_DB                                        -    mysqldb_local
##      MYSQL_USER                                      -    mysql
##      MYSQL_PASS                                      -    my5qLLw
##      MYSQL_NET                                       -    mysql-net
##      PGADMIN_USER                                    -    root@pgadmin.org
##      PGADMIN_PASS                                    -    pg4dM1nLw
##      PHPMYADMIN_HOST                                 -    mysql
##      POSTGRES_DB                                     -    psqldb_local
##      POSTGRES_USER                                   -    postgres
##      POSTGRES_PASS                                   -    p0stgresLw
##      POSTGRES_NET                                    -    postgres-net
##      RABBITMQ_HOST                                   -    rabbitmq
##      RABBITMQ_USER                                   -    rabbitmq
##      RABBITMQ_PASS                                   -    r4bbitLmq
##
####

main $*
